<div class="titlebar fade hidden">
    <div class="flex-1" @onmousedown="mainForm.Drag"></div>
    <button @onclick="() => mainForm.Close()"
            @onclick:stopPropagation="true">&nbsp;</button>
</div>

<div class="main fade hidden">
    <CascadingValue Value="this">

        <LogView @ref="logView" />

        <div class="page fade">
            <Page_Checksum visible="page == nameof(Page_Checksum)" onNextClick="Checksum_NextClick" />
            <Page_MainMenu visible="page == nameof(Page_MainMenu)" />
            <Page_Project visible="page == nameof(Page_Project)" />
            <Page_Script visible="page == nameof(Page_Script)" />
        </div>

        <TaskInstanceListView />

        <Dialog_NewProject @ref="newProjectDialog" />
        <Dialog_Config @ref="configDialog" />
        <Dialog_CustomBuildSettings @ref="customBuildSettingsDialog" />

        <Dialog_Selector @ref="selectorDialog" />
        <Dialog_Selector @ref="languageSelectorDialog" styleClass="dialog-language" />

    </CascadingValue>
</div>

@inject IJSRuntime javascript

@code {

    [Parameter] public MainForm mainForm { get; set; }
    [Parameter] public Config config { get; set; }

    public LogView logView { get; private set; }

    public Dialog_NewProject newProjectDialog { get; private set; }
    public Dialog_Config configDialog { get; private set; }
    public Dialog_CustomBuildSettings customBuildSettingsDialog { get; private set; }

    public Dialog_Selector selectorDialog { get; private set; }
    public Dialog_Selector languageSelectorDialog { get; private set; }

    string _page = nameof(Page_Checksum);
    public string page
    {
        private get => _page;
        set
        {
            if (_page == value)
                return;

            _page = value;
            this.Render();
        }
    }

    public Project project;
    public ScriptFile scriptFile;

    protected override void OnInitialized()
    {
        mainForm.FormClosing += async (_, _) =>
        {
            await SetHiddenAsync(true);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await SetHiddenAsync(false);
        mainForm.ShowCenter(config.uiScale);
    }

    async Task SetHiddenAsync(bool hidden)
    {
        await javascript.InvokeVoidAsync("setClass", "#app .titlebar, #app .main", "hidden", hidden);
    }

    void Checksum_NextClick()
    {
        page = nameof(Page_MainMenu);
    }

}