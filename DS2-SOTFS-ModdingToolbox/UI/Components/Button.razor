<button @onclick="SimpleAsyncCallback.Create(OnClick)"
        disabled="@disabled"
        class="@styleClass">
    @ChildContent
</button>

@code {

    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public Action onClick { get; set; }
    [Parameter] public Func<Task> onClickAsync { get; set; }
    [Parameter] public bool enabled { get; set; } = true;

    public class StyleClass
    {
        public enum Size { Small, Normal, Large }
        public enum Appearance { Default, Primary, Dangerous }

        public Size size;
        public Appearance appearance;
        public string customClasses;
        public bool autoSize;

        public static StyleClass Create(
            Size size,
            Appearance appearance = Appearance.Default
        ) => new()
        {
            size = size,
            appearance = appearance
        };

        public static StyleClass Create(string customClasses) => new()
        {
            customClasses = customClasses
        };

        public StyleClass AutoSize()
        {
            autoSize = true;
            return this;
        }

        public override string ToString()
        {
            var result = new List<string>() { "button" };

            switch (size)
            {
                case Size.Small:
                    result.Add($"button-small");
                    break;

                case Size.Normal:
                    result.Add($"button-normal");
                    break;

                case Size.Large:
                    result.Add($"button-large");
                    break;
            }

            switch (appearance)
            {
                case Appearance.Default:
                    result.Add($"button-default");
                    break;

                case Appearance.Primary:
                    result.Add($"button-primary");
                    break;

                case Appearance.Dangerous:
                    result.Add($"button-dangerous");
                    break;
            }

            if (autoSize)
                result.Add("button-autosize");

            if (!string.IsNullOrEmpty(customClasses))
                result.Add(customClasses);

            return string.Join(" ", result);
        }
    }

    [Parameter] public StyleClass styleClass { get; set; } = BSC.Create(BSC.Size.Normal);

    bool disabled => MainForm.instance.closing || !enabled;

    async Task OnClick()
    {
        if (onClick is not null)
            onClick.Invoke();

        if (onClickAsync is not null)
            await onClickAsync.Invoke();
    }

    record SimpleAsyncCallback(Func<Task> Callback) : IHandleEvent
    {
        public static Func<Task> Create(Func<Task> callback) => new SimpleAsyncCallback(callback).Invoke;

        public Task Invoke() => Callback();
        public Task HandleEventAsync(EventCallbackWorkItem item, object arg) => item.InvokeAsync(arg);
    }

}