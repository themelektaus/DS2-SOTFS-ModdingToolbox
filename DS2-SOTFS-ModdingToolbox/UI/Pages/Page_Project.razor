<Animated visible="visible" styleClass="flex-vertical">
    @if (app.project is not null)
    {
        <Selectable enabled="false">
            <div class="flex-vertical flex-1" style="padding: 1.5rem; line-height: 2em; ">
                <div style="font-size: 1.5em; ">@app.project.name</div>
                <div>@((app.project as ISelectable).GetRelativePath())</div>
                <div>@((app.project as ISelectable).GetTimestampString())</div>
            </div>
            <div class="flex-vertical">
                <Button onClick="CloseProject_Click"
                        enabled="!Program.externalApplicationIsRunning"
                        styleClass="@BSC.Create(BSC.Size.Small, BSC.Appearance.Dangerous)">
                    @CLOSE
                </Button>
                <Button onClick="BackupProject_Click"
                        styleClass="@BSC.Create(BSC.Size.Small)">
                    @BACKUP
                </Button>
            </div>
        </Selectable>
        <div style="height: 1.5rem; "></div>
        <div class="flex-horizontal">
            <div class="flex-vertical">
                <div>
                    <Button onClickAsync="DSMapStudioButton_Click"
                            enabled="!Program.dsMapStudioIsRunning"
                            styleClass="@BSC.Create(BSC.Size.Large, BSC.Appearance.Primary)">
                        @DS_MAP_STUDIO
                    </Button>
                </div>
                <div>
                    <Button onClick="app.customBuildSettingsDialog.Show"
                            enabled="!app.project.useDSMapStudioParams"
                            styleClass="@BSC.Create(BSC.Size.Large)">
                        @CUSTOM_BUILD_SETTINGS
                    </Button>
                </div>
                <div style="margin: .25rem .5rem; ">
                    <CheckBox checkedValue="app.project.useDSMapStudioParams"
                              checkedValueChanged="UseDSMapStudioParams_Change" />
                    <span>@USE_DS_MAP_STUDIO_PARAMS</span>
                </div>
            </div>
            <div class="flex-vertical flex-0">
                <div>
                    @if (buildExists)
                    {
                        <Button onClickAsync="RebuildButton_Click" enabled="!processing && !gameIsRunning">
                            @REBUILD
                        </Button>
                    }
                    else
                    {
                        <Button onClickAsync="BuildButton_Click" enabled="!processing && !gameIsRunning">
                            @BUILD
                        </Button>
                    }
                </div>
                <div>
                    <Button onClickAsync="ReloadButton_Click" enabled="gameIsRunning">
                        @RELOAD
                    </Button>
                </div>
                <div>
                    <Button onClickAsync="ClearButton_Click" enabled="!processing && !gameIsRunning && buildExists">
                        @CLEAR
                    </Button>
                </div>
            </div>
            <div class="flex-vertical">
                <div>
                    <Button onClickAsync="RunGameButton_Click"
                            enabled="!processing && !gameIsRunning && buildExists"
                            styleClass="BSC.Create(BSC.Size.Large, BSC.Appearance.Primary)">
                        @RUN_GAME
                    </Button>
                </div>
                <div style="margin: .25rem .5rem; ">
                    <CheckBox checkedValue="app.config.freezeSavegame"
                              checkedValueChanged="FreezeSavegame_Change"
                              enabled="!gameIsRunning" />
                    <span>@FREEZE_SAVEGAME</span>
                </div>
            </div>
        </div>
    }
</Animated>

@code {

    [CascadingParameter] public App app { get; set; }
    
    [Parameter] public bool visible { get; set; }

    bool processing;
    bool buildExists => GameFinderUtils.BuildExists(app.config);
    bool gameIsRunning;

    void BackupProject_Click()
    {
        app.project.Backup(UserData.backupFolder);
        app.logView.visible = true;
    }

    void CloseProject_Click()
    {
        app.page = nameof(Page_MainMenu);
    }

    async Task RebuildButton_Click()
    {
        processing = true;
        app.Render();

        var clearTask = new ManagedTask_ClearBuild(app.config);
        var clearTaskInstance = Program.taskManager.Enqueue(clearTask);

        var buildTask = new ManagedTask_Build(app.config, app.project);
        var buildTaskInstance = Program.taskManager.Enqueue(buildTask);

        await clearTaskInstance.WaitAsync();
        await buildTaskInstance.WaitAsync();

        processing = false;
        app.Render();
    }

    async Task DSMapStudioButton_Click()
    {
        var task = ProcessUtils.RunAsync(app.config.dsMapStudioExe, $"\"{Path(app.project.folder, "project.json")}\"");
        app.Render();

        await task;
        app.Render();
    }

    void UseDSMapStudioParams_Change(bool useDSMapStudioParams)
    {
        app.project.useDSMapStudioParams = useDSMapStudioParams;
        app.project.Save();
        app.Render();
    }

    async Task BuildButton_Click()
    {
        processing = true;
        app.Render();

        var task = new ManagedTask_Build(app.config, app.project);
        await Program.taskManager.RunAsync(task);

        processing = false;
        app.Render();
    }

    async Task ClearButton_Click()
    {
        processing = true;
        app.Render();

        var task = new ManagedTask_ClearBuild(app.config);
        await Program.taskManager.RunAsync(task);

        processing = false;
        app.Render();
    }

    async Task RunGameButton_Click()
    {
        gameIsRunning = true;
        app.Render();

        string savegameFile = null;
        byte[] savegameData = null;

        if (app.config.freezeSavegame)
        {
            if (Utils.TryGetSavegame(out var savegame))
            {
                savegameFile = savegame.FullName;
                savegameData = ReadBytes(savegameFile);
            }
        }

        await GameFinderUtils.RunGameAsync(app.config);

        await Utils.WaitLongAsync();

        while (!Program.gameIsRunning)
            await Utils.WaitLongAsync();

        app.Render();

        while (Program.gameIsRunning)
            await Utils.WaitLongAsync();

        if (savegameFile is not null && savegameData is not null)
            WriteBytes(savegameFile, savegameData);

        gameIsRunning = false;
        app.Render();
    }

    void FreezeSavegame_Change(bool freezeSavegame)
    {
        app.config.freezeSavegame = freezeSavegame;
        app.config.Save();
    }

    async Task ReloadButton_Click()
    {
        await GameBuilderUtils.ReloadAsync(app.config, app.project);
    }
}