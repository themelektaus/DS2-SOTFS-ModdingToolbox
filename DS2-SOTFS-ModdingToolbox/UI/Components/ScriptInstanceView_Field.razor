@using System.Reflection

<div class="script-instance-field">
    <div class="fieldset">
        <label>@field.Name</label>
        @if (field.FieldType.IsGenericList())
        {
            foreach (var item in GetItems())
            {
                <input type="text" value="@(item?.ToString() ?? "")" />
            }
        }
        else
        {
            <input type="text" value="@GetString()" @oninput="SetValue" class="@(valid ? "valid" : "invalid")" />
        }
    </div>
</div>

@code {

    [Parameter] public ScriptInstance scriptInstance { get; set; }
    [Parameter] public FieldInfo field { get; set; }

    bool valid = true;

    object GetValue()
    {
        return field.GetValue(scriptInstance.runtimeObject);
    }

    string GetString()
    {
        return GetValue()?.ToString() ?? "";
    }

    List<object> GetItems()
    {
        var list = GetValue() as System.Collections.IList;

        var result = new List<object>();
        foreach (var item in list)
            result.Add(item);
        return result;
    }

    void SetValue(ChangeEventArgs e)
    {
        try
        {
            var value = Convert.ChangeType(e.Value, field.FieldType);
            field.SetValue(scriptInstance.runtimeObject, value);
            valid = true;
        }
        catch
        {
            valid = false;
        }
    }

}